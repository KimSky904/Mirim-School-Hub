sys /as sysdba
mirim


SID확인 : select instance from v$thread;
DB이름 확인 : select name,db_unique_name from v$database;
포트확인 :  select dbms_xdb.gethttpport() from dual;
포트변경 :  exec dbms_xdb.sethttpport(변경할 숫자);



cmd에서 확인
lsnrctl status : 리스너 상태확인
lsnrctl stop : 리스너 중지
lsnrctl start : 리스너 시작




DESC EMP;
SELECT * FROM EMP;

-> DDL
CREATE TABLE EMP ();
//테이블 변경
ALTER TABLE EMP RENAME TO NEW_EMP;
ALTER TABLE EMP ADD (age number(2) default 1);
ALTER TABLE EMP MODIFY (ename varchar2(40) not null);
ALTER TABLE EMP DROP COLUMN age;
ALTER TABLE EMP RENAME COLUMN ename TO new_ename;
ALTER TABLE DEPT NOLOGGING; // BUFFER CACHE 메모리 영역을 생략하고 기록

//테이블 삭제
DROP TABLE EMP:
DROP TABLE EMP CASCADE CONSTRAINT;

//뷰 생성과 삭제
CREATE VIEW T_EMP AS SELECT * FROM EMP:
SELECT * FROM T_EMP;
DROP VIEW T_EMP;



-> DML(DATA MANIPULATION LANGUAGE)
INSERT INTO EMP(EMPNO,ENAME) VALUES(1000,'임베스트');
INSERT INTO EMP VALUES(......); //데이터 파일에 바로 저장하려면 TCL의 COMMIT 사용필요
INSERT INTO NEW_DEPT SELECT * FROM DEPT;

UPDATE EMP SET ENAME='조조' WHERE EMPNO=100;
DELETE FROM EMP WHERE EMPNO = 100;
DELETE FROM EMP; // 테이블 용량은 초기화되지 않음
TRUNCATE TABLE EMP; //테이블 용량도 초기화

SELECT * FROM EMP WHERE 사원번호 = 1000;
SELECT ENAME || '님' FROM EMP;
SELECT * FROM NEW_EMP ORDER BY NEW_ENAME DESC;
SELECT * FROM NEW_EMP ORDER BY NEW_ENAME, SAL DESC;
SELECT /*+INDEX_DESC(A) */ * FROM NEW_EMP; //인덱스 힌트를 사용한 정렬회피 -> 정렬없이 거꾸로 읽음
SELECT DEPTNO FROM EMP ORDER BY DEPTNO;
SELECT DISTINCT DEPTNO FROM NEW_EMP ORDER BY DEPTNO; //중복방지
SELECT ENAME AS "이름" FROM EMP a WHERE a.EMPNO = 1000;

SELECT * FROM EMP WHERE EMPNO=101 AND SAL>=1000;
SELECT * FROM DEPT WHERE DEPTNAME LIKE '영%';
SELECT * FROM EMP WHERE ENAME LIKE '조_'; //숫자도 따옴표 안에 넣어서 사용가능
SELECT * FROM DEPT WHERE DEPTNO LIKE 1000;
SELECT * FROM DEPT WHERE DEPTNO BETWEEN 1000 AND 2000;

SELECT * FROM NEW_EMP WHERE AGE IN (18,19,20);
SELECT * FROM NEW_EMP WHERE (EMPNO,AGE) IN ((100,18),(100,20));
SELECT * FROM EMP WHERE MGR IS NULL;
SELECT * FROM EMP WHERE MGR IS NOT NULL;
//NULL 관련 함수
NVL(MGR,1) -> MGR칼럼이 NULL이면 0으로 바꿈
NVL2(MGR,1,0) -> MGR칼럼이 NULL아니면 1, NULL이면 0 반환
NULLIF(A,B) -> A와 B 같으면 NULL반환, 같지않으면 A반환
COALESCE(A1,A2,A3,A4,A5...) -> 순서대로 NULL아닌거만나면 반환


//GROUP BY
SELECT DEPTNO,SUM(SAL) FROM EMP GROUP BY DEPTNO;
SELECT DEPTNO,SUM(SAL) FROM NEW_EMP GROUP BY DEPTNO HAVING SUM(SAL) > 100;
SELECT DEPTNO,COUNT(DEPTNO) FROM NEW_EMP GROUP BY DEPTNO HAVING SUM(SAL) > 100;
+) MAX,MIN,AVG,STDDEV(표준편차),VARIAN(분산)
COUNT(*) -> NULL포함
COUNT(칼럼명) -> NULL 제외

//SELECT문 실행순서
FROM - WHERE - GROUP BY - HAVING - SELECT - ORDER BY

//내장형 함수
-


//ROWNUM
SELECT * FROM NEW_EMP WHERE ROWNUM<=1;
SELECT * FROM (SELECT ROWNUM LIST,NEW_ENAME FROM NEW_EMP) WHERE LIST<=2;
SELECT * FROM (SELECT ROWNUM LIST,NEW_ENAME FROM NEW_EMP) WHERE ROWNUM<=2;


//WITH
WITH QUIZ AS (SELECT*FROM NEW_EMP WHERE DEPTNO=1001)  SELECT * FROM QUIZ;
WITH VIEWDATA AS (SELECT * FROM NEW_EMP UNION ALL SELECT*FROM NEW_EMP) SELECT * FROM VIEWDATA WHERE EMPNO = 1000;



//DCL
GRANT SELECT,INSERT,UPDATE,DELETE ON NEW_EMP TO TESTER;
WITH GRANT OPTION -> 다른사람에게 권한을 주는 권한, 전체권한회수가능
WITH ADMIN OPTION -> 테이블에대한 모든 권한, 전체권한회수불가
REVOKE INSERT ON EMP FROM TESTER; -> INSERT에 대한 TESTER의 권한 회수


//TCL
COMMIT; -> 변경한 데이터 데이터베이스에 반영 (DDL,DCL 자동COMMI됨)
ROLLBACK; -> 변경된 사항 취소
SAVEPOINT T1;
ROLLBACK TO T1;


ALTER TABLE EMP ADD CONSTRAINT FK_DEPT FOREIGN KEY (DEPTNO) REFRENCES DEPT(DEPTNO)

//equi join
select deptno from emp intersect select deptno from dept;
//inner join
select * from emp inner join dept on emp.deptno = dept.deptno;
//outer join
select * from dept,emp where emp.deptno (+)= dept.deptno;
//left outer join
select * from dept left outer join emp on emp.deptno = dept.deptno;
//right outer join
select * from dept left outer join emp on emp.deptno = dept.deptno;
//cross join -> 조건없음(카테시안 곱)
select * from emp cross join dept;

//union -> 두개의 테이블을 하나로, 모든형식 일치해야함, 정렬통한 중복제거
select deptno from emp union select deptno from emp;
//union all -> 두개의 테이블을 하나로, 중복제거+정렬 없음
select deptno from emp union all select deptno from emp;
//minus -> 차집합, 먼저쓴select엔 있고 뒤에는 없는것
select deptno from dept minus select deptno from emp;


->계층형 조회
//최대 계층 수
select max(level) from emp start with mgr is null connect by prior empno = mgr;
//계층구조 조회
select level,empno,mgr,ename from emp start with mgr is null connect by prior empno = mgr;
//(더 명확한 구조 조회) lpad를 통해 공백을 사용
select level, lpad(' ',4*(level-1)) || empno,mgr,connect_by_isleaf from emp start with mgr is null connect by prior empno = mgr;




//서브쿼리 -> select문 안에 select문
//inline view -> from구 안 select 사용(가상의 뷰 만듬)
select * from (select rownum num,ename from emp) a where num<5;
//scala subquery -> select문에 subquery 사용
select * from emp where deptno = (select deptno from dept where deptno = 10);


//단일 행 서브쿼리
//다중 행 서브쿼리 -> 서브쿼리 결과가 여러개의 행 반환
//IN
SELECT ENAME,DEPTNAME,SAL FROM EMP,DEPT WHERE EMP.DEPTNO = DEPT.DEPTNO AND EMP.EMPNO IN (SELECT EMPNO FROM EMP WHERE SAL > 2000);
//ALL -> 20보다 작거나 크다 && 30보다 작거나 크다
SELECT * FROM EMP WHERE DEPTNO <= ALL(20,30);
//EXISTS
SELECT ENAME,DEPTNAME,SAL FROM EMP,DEPT WHERE EMP.DEPTNO = DEPT.DEPTNO AND EXISTS (SELECT 1 FROM EMP WHERE SAL > 2000);
//스칼라 서브쿼리 -> 한행과 한칼럼만 반환 (여러개면 오류)
SELECT ENAME AS "이름", SAL AS "급여", (SELECT AVG(SAL) FROM EMP) AS "평균급여" FROM EMP WHERE EMPNO = 1000;
//연관(CORRELATED) 서브쿼리
SELECT * FROM EMP A WHERE A.DEPTNO = (SELECT DEPTNO FROM DEPT B WHERE B.DEPTNO = A.DEPTNO);



//그룹 함수 (GROUP BY 순서상관 0)
//ROLLUP -> GROUP BY칼럼에 대해 SUBTOTAL 만들어줌
SELECT DEPTNO,JOB,SUM(SAL) FROM EMP GROUP BY ROLLUP(DEPTNO,JOB);
SELECT DECODE(DEPTNO,NULL,'전체합계',DEPTNO), SUM(SAL) FROM EMP GROUP BY ROLLUP(DEPTNO);
//그루핑 함수 -> ROLLUP,CUBE등의 함수에서 생성되는 합계값 구분, 계산되면 1반환
SELECT DEPTNO,GROUPING(DEPTNO),JOB,GROUPING(JOB),SUM(SAL) FROM EMP GROUP BY ROLLUP(DEPTNO,JOB);
SELECT DEPTNO,DECODE(GROUPING(DEPTNO),1,'전체합계') TOT,JOB,DECODE(GROUPING(JOB),1,'부서합계') T_DEPT, SUM(SAL) FROM EMP GROUP BY ROLLUP(DEPTNO,JOB);
//그루핑 SETS 함수 (GROUP BY 순서상관 X) 각 그룹계산 따로 함
SELECT DEPTNO,JOB,SUM(SAL) FROM EMP GROUP BY GROUPING SETS(DEPTNO,JOB);
//CUBE 함수 -> 조합가능한 모든 전체합계 조회됨
SELECT DEPTNO,JOB,SUM(SAL) FROM EMP GROUP BY CUBE(DEPTNO,JOB);


//WINDOW 함수 -> 행과 행 관계를 정의하기 위함 (순위,합계 등 조작)
//첫행 ~ 마지막행 합계구하기
SELECT EMPNO,ENAME,SAL,SUM(SAL) OVER (ORDER BY SAL ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) TOTSAL FROM EMP;
//첫행 ~ 각 행별 누적합 구하기
SELECT EMPNO,ENAME,SAL,SUM(SAL) OVER (ORDER BY SAL ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) TOTSAL FROM EMP;
//현재행 ~ 마지막행 합계 구하기
SELECT EMPNO,ENAME,SAL,SUM(SAL) OVER (ORDER BY SAL ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) TOTSAL FROM EMP;
//순위함수
//RANK -> 동일순위 동일값
SELECT ENAME,SAL,RANK() OVER (ORDER BY SAL DESC) ALL RANK, RANK() OVER (PARTITION BY JOB ORDER BY SAL DESC) JOB_RANK FROM EMP;
//DENSE_RANK -> 동일순위 하나의 건수
SELECT ENAME,SAL,RANK() OVER (ORDER BY SAL DESC) ALL_RANK,DENSE_RANK() OVER (ORDER BY SAL DESC) DENSE_RANK FROM EMP;
//ROW_NUMBER -> 동일순위 고유순위부여
SELECT ENAME,SAL,RANK() OVER (ORDER BY SAL DESC) ALL_RANK, ROW_NUMBER() OVER (ORDER BY SAL DESC) ROW_NUM FROM EMP;
//집계함수 -> SUM,AVG,COUNT,MAX,MIN
//SUM
SELECT ENAME,SAL,MGR,SUM(SAL) OVER (PARTITION BY MGR) SUM_MGR FROM EMP;
//행 순서 관련 함수
//FIRST_VALUE -> MIN과 동일한 결과
SELECT DEPTNO,ENAME,SAL,FIRST_VALUE(ENAME) OVER (PARTITION BY DEPTNO ORDER BY SAL DESC ROWS UNBOUNDED PRECEDING) AS DEPT_A FROM EMP;
//LAST_VALUE -> MAX와 동일한 결과
SELECT DEPTNO,ENAME,SAL, LAST_VALUE(ENAME) OVER (PARTITION BY DEPTNO ORDER BY SAL DESC ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) AS DEPT_A FROM EMP;
//LAG -> 이전 행
SELECT DEPTNO,ENAME,SAL,LAG(SAL) OVER(ORDER BY SAL DESC) AS PRE_SAL FROM EMP;
//LEAD -> 특정위치 행(기본 1)
SELECT DEPTNO,ENAME,SAL,LEAD(SAL,2) OVER(ORDER BY SAL DESC) AS PRE_SAL FROM EMP;
//비율 관련 함수
//PERCENT_RANK() -> 등수의 퍼센트
SELECT DEPTNO,ENAME,SAL,PERCENT_RANK() OVER(PARTITION BY DEPTNO ORDER BY SAL DESC) AS PRECENT_SAL FROM EMP;
//NTILE(4) -> 4개로 분할
SELECT DEPTNO,ENAME,SAL,NTILE(4) OVER(ORDER BY SAL DESC) AS N_TILE FROM EMP;






//파티션 -> 대용량의 테이블을 여러 데이터파일에 분리하여 저장
//RANGE PARTITION -> 값의 범위를 기준으로 나눔
//LIST PARTITION -> 특정 값을 기준으로 나눔
//HASH PARTITION -> 내부적 자동 관리
//COMPOSITE PARTITION -> 여러 파티션 기법 조합












